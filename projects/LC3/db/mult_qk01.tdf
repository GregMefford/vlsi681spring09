--lpm_mult CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEDICATED_MULTIPLIER_CIRCUITRY="AUTO" DEVICE_FAMILY="Cyclone" DSP_BLOCK_BALANCING="Auto" INPUT_A_IS_CONSTANT="NO" INPUT_B_IS_CONSTANT="NO" LPM_REPRESENTATION="UNSIGNED" LPM_WIDTHA=8 LPM_WIDTHB=8 LPM_WIDTHP=16 LPM_WIDTHS=1 MAXIMIZE_SPEED=5 dataa datab result CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 9.0 cbx_cycloneii 2008:05:19:10:57:37:SJ cbx_lpm_add_sub 2008:12:09:22:11:50:SJ cbx_lpm_mult 2008:09:30:18:36:56:SJ cbx_mgl 2009:01:29:16:12:07:SJ cbx_padd 2008:09:04:11:11:31:SJ cbx_stratix 2008:09:18:16:08:35:SJ cbx_stratixii 2008:11:14:16:08:42:SJ cbx_util_mgl 2008:11:21:14:58:47:SJ  VERSION_END


-- Copyright (C) 1991-2009 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION carry_sum (cin, sin)
RETURNS ( cout, sout);
FUNCTION lcell (in)
RETURNS ( out);
FUNCTION soft (in)
RETURNS ( out);

--synthesis_resources = lut 117 
SUBDESIGN mult_qk01
( 
	dataa[7..0]	:	input;
	datab[7..0]	:	input;
	result[15..0]	:	output;
) 
VARIABLE
	add12_result[15..0]	:	WIRE;
	add16_result[12..0]	:	WIRE;
	add20_result[6..0]	:	WIRE;
	add24_result[2..0]	:	WIRE;
	add8_result[18..0]	:	WIRE;
	cs1a[4..0] : carry_sum;
	cs2a[4..0] : carry_sum;
	le3a[9..0] : lcell;
	le4a[9..0] : lcell;
	le5a[9..0] : lcell;
	le6a[9..0] : lcell;
	le7a[8..0] : lcell;
	sft10a[18..0] : soft;
	sft11a[18..0] : soft;
	sft13a[15..0] : soft;
	sft14a[15..0] : soft;
	sft15a[15..0] : soft;
	sft17a[12..0] : soft;
	sft18a[12..0] : soft;
	sft19a[12..0] : soft;
	sft21a[6..0] : soft;
	sft22a[6..0] : soft;
	sft23a[6..0] : soft;
	sft25a[2..0] : soft;
	sft26a[2..0] : soft;
	sft27a[2..0] : soft;
	sft9a[18..0] : soft;
	dataa_node[7..0]	: WIRE;
	datab_node[7..0]	: WIRE;
	final_result_node[15..0]	: WIRE;
	w101w[9..0]	: WIRE;
	w156w[9..0]	: WIRE;
	w204w[9..0]	: WIRE;
	w323w	: WIRE;
	w347w	: WIRE;
	w514w[18..0]	: WIRE;
	w7w[9..0]	: WIRE;

BEGIN 
	add12_result[] = sft13a[].out + sft14a[].out;
	add16_result[] = sft17a[].out + sft18a[].out;
	add20_result[] = sft21a[].out + sft22a[].out;
	add24_result[] = sft25a[].out + sft26a[].out;
	add8_result[] = sft9a[].out + sft10a[].out;
	cs1a[].cin = ( ((w7w[8..8] & cs1a[3].cout) # w7w[9..9]), (cs1a[2].cout & w7w[6..6]), ((w7w[4..4] & cs1a[1].cout) # w7w[5..5]), ((w7w[2..2] & cs1a[0].cout) # w7w[3..3]), w7w[1..1]);
	cs1a[].sin = ( ((((((! w7w[9..9]) & w7w[8..8]) & cs1a[3].cout) # ((w7w[9..9] & w7w[8..8]) & (! cs1a[3].cout))) # ((w7w[9..9] & (! w7w[8..8])) & cs1a[3].cout)) # ((w7w[9..9] & (! w7w[8..8])) & (! cs1a[3].cout))), (cs1a[2].cout & w7w[6..6]), ((((((! w7w[5..5]) & w7w[4..4]) & cs1a[1].cout) # ((w7w[5..5] & w7w[4..4]) & (! cs1a[1].cout))) # ((w7w[5..5] & (! w7w[4..4])) & cs1a[1].cout)) # ((w7w[5..5] & (! w7w[4..4])) & (! cs1a[1].cout))), ((((((! w7w[3..3]) & w7w[2..2]) & cs1a[0].cout) # ((w7w[3..3] & w7w[2..2]) & (! cs1a[0].cout))) # ((w7w[3..3] & (! w7w[2..2])) & cs1a[0].cout)) # ((w7w[3..3] & (! w7w[2..2])) & (! cs1a[0].cout))), w7w[1..1]);
	cs2a[].cin = ( ((w7w[8..8] & cs2a[3].cout) # w7w[9..9]), (cs2a[2].cout $ w7w[6..6]), ((w7w[4..4] & cs2a[1].cout) # w7w[5..5]), ((w7w[2..2] & cs2a[0].cout) # w7w[3..3]), w7w[1..1]);
	cs2a[].sin = ( ((((((! w7w[9..9]) & (! w7w[8..8])) & cs2a[3].cout) # (((! w7w[9..9]) & w7w[8..8]) & (! cs2a[3].cout))) # ((w7w[9..9] & w7w[8..8]) & (! cs2a[3].cout))) # ((w7w[9..9] & (! w7w[8..8])) & cs2a[3].cout)), (cs2a[2].cout $ w7w[6..6]), ((((((! w7w[5..5]) & (! w7w[4..4])) & cs2a[1].cout) # (((! w7w[5..5]) & w7w[4..4]) & (! cs2a[1].cout))) # ((w7w[5..5] & w7w[4..4]) & (! cs2a[1].cout))) # ((w7w[5..5] & (! w7w[4..4])) & cs2a[1].cout)), ((((((! w7w[3..3]) & (! w7w[2..2])) & cs2a[0].cout) # (((! w7w[3..3]) & w7w[2..2]) & (! cs2a[0].cout))) # ((w7w[3..3] & w7w[2..2]) & (! cs2a[0].cout))) # ((w7w[3..3] & (! w7w[2..2])) & cs2a[0].cout)), w7w[0..0]);
	le3a[].in = (! ((! (((! ( B"0", dataa_node[], B"0")) & cs1a[0].sout) & (! cs2a[0].sout))) & (! ((((! ( B"0", B"0", dataa_node[])) & cs1a[0].sout) & cs2a[0].sout) # ((( B"0", B"0", dataa_node[]) & (! cs1a[0].sout)) & cs2a[0].sout)))));
	le4a[].in = (! ((! (((! ( B"0", dataa_node[], B"0")) & cs1a[1].sout) & (! cs2a[1].sout))) & (! ((((! ( B"0", B"0", dataa_node[])) & cs1a[1].sout) & cs2a[1].sout) # ((( B"0", B"0", dataa_node[]) & (! cs1a[1].sout)) & cs2a[1].sout)))));
	le5a[].in = (! ((! (((! ( B"0", dataa_node[], B"0")) & cs1a[2].sout) & (! cs2a[2].sout))) & (! ((((! ( B"0", B"0", dataa_node[])) & cs1a[2].sout) & cs2a[2].sout) # ((( B"0", B"0", dataa_node[]) & (! cs1a[2].sout)) & cs2a[2].sout)))));
	le6a[].in = ((cs1a[3].sout & ( B"0", dataa_node[], B"0")) # (cs2a[3].sout & ( B"0", B"0", dataa_node[])));
	le7a[].in = (w7w[7..7] & ( B"0", dataa_node[]));
	sft10a[].in = ( w347w, ( sft15a[15..15].out, ( sft19a[12..12].out, ( sft19a[11..11].out, ( sft19a[10..10].out, ( sft19a[9..9].out, ( sft19a[8..8].out, ( sft19a[7..7].out, ( sft19a[6..6].out, ( sft19a[5..5].out, ( sft19a[4..4].out, ( sft19a[3..3].out, ( sft19a[2..2].out, ( sft19a[1..1].out, ( sft19a[0..0].out, ( sft15a[1..1].out, ( sft15a[0..0].out, ( w347w, cs1a[0].sout))))))))))))))))));
	sft11a[].in = add8_result[];
	sft13a[].in = ( w347w, ( w323w, ( le7a[8..8].out, ( le7a[7..7].out, ( le7a[6..6].out, ( le7a[5..5].out, ( le7a[4..4].out, ( le7a[3..3].out, ( le7a[2..2].out, ( le7a[1..1].out, ( le7a[0..0].out, ( le6a[0..0].out, ( le5a[1..1].out, ( le5a[0..0].out, ( le3a[3..2].out)))))))))))))));
	sft14a[].in = ( w347w, ( w347w, ( le6a[9..9].out, ( le6a[8..8].out, ( le6a[7..7].out, ( sft23a[5..5].out, ( sft23a[4..4].out, ( sft23a[3..3].out, ( sft23a[2..2].out, ( sft23a[1..1].out, ( sft23a[0..0].out, ( le5a[2..2].out, ( le4a[3..3].out, ( le4a[2..2].out, ( w347w, cs1a[1].sout)))))))))))))));
	sft15a[].in = add12_result[];
	sft17a[].in = ( w347w, ( w323w, ( w323w, ( (! w204w[9..9]), ( le6a[6..6].out, ( le6a[5..5].out, ( le6a[4..4].out, ( le6a[3..3].out, ( le6a[2..2].out, ( le6a[1..1].out, ( le4a[4..4].out, ( le3a[5..5].out, cs1a[2].sout))))))))))));
	sft18a[].in = ( w347w, ( w347w, ( w347w, ( sft23a[6..6].out, ( le5a[8..8].out, ( sft27a[2..2].out, ( sft27a[1..1].out, ( sft27a[0..0].out, ( le5a[4..4].out, ( le5a[3..3].out, ( le3a[6..6].out, ( w347w, le3a[4..4].out))))))))))));
	sft19a[].in = add16_result[];
	sft21a[].in = ( w347w, ( w323w, ( le5a[7..7].out, ( le5a[6..6].out, ( le5a[5..5].out, ( le4a[6..5].out))))));
	sft22a[].in = ( w347w, ( w347w, ( (! w156w[9..9]), ( le4a[8..8].out, ( le4a[7..7].out, ( le3a[8..7].out))))));
	sft23a[].in = add20_result[];
	sft25a[].in = ( w347w, ( w323w, w323w));
	sft26a[].in = ( w347w, ( w347w, (! w101w[9..9])));
	sft27a[].in = add24_result[];
	sft9a[].in = ( w323w, ( w323w, ( sft15a[14..14].out, ( sft15a[13..13].out, ( sft15a[12..12].out, ( sft15a[11..11].out, ( sft15a[10..10].out, ( sft15a[9..9].out, ( sft15a[8..8].out, ( sft15a[7..7].out, ( sft15a[6..6].out, ( sft15a[5..5].out, ( sft15a[4..4].out, ( sft15a[3..3].out, ( sft15a[2..2].out, ( le4a[1..1].out, ( le4a[0..0].out, ( le3a[1..0].out))))))))))))))))));
	dataa_node[] = ( dataa[7..0]);
	datab_node[] = ( datab[7..0]);
	final_result_node[] = ( w514w[15..0]);
	result[] = ( final_result_node[15..0]);
	w101w[] = le3a[].out;
	w156w[] = le4a[].out;
	w204w[] = le5a[].out;
	w323w = B"1";
	w347w = B"0";
	w514w[] = ( sft11a[18..17].out, sft11a[16..15].out, sft11a[14..13].out, sft11a[12..11].out, sft11a[10..9].out, sft11a[8..7].out, sft11a[6..5].out, sft11a[4..3].out, sft11a[2..1].out, sft11a[0..0].out);
	w7w[] = ( B"00", datab_node[]);
END;
--VALID FILE
