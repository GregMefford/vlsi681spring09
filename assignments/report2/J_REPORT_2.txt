20-EECE-681—Quarter Project--Week 2
April 7, 2009
Due Monday April 13

1.  Modify your week 1 assignment if necessary according to the comments you received.


2.  CARRY OUT the experiments we designed in lecture for the simple problems on critical path, delay, and fan-out (and power).


3.  Begin work on the data path of your processor.
Step 1.  Explain completely and justify any changes you will be making to the ISA (instruction set architecture) of your machine.  These should be related to operations needed by the benchmark problems or optimizations you plan to carry out in steps 2 (pipelining) and 3 (dual processors).  Explain any changes to the capability of the LC-3 processor which your modifications will make and justify these.

ISA Changes:
We will be replacing the unused opcode 1101 with a MUL instruction to support hardware multiplication:
2-Register: [Overflow, Dest] = Src1 * Src2
15      12 | 11      9 | 8       6 | 5 | 4   3 | 2       0
1  1  0  1 | Dest  Reg | Src Reg 1 | 0 | 0   0 | SRC Reg 2

Register-Immediate: [Overflow, Dest] Src1 * IMM5
15      12 | 11      9 | 8       6 | 5 | 4               0
1  1  0  1 | Dest  Reg | Src Reg 1 | 1 | Immediate 5 Bits

Shift-Left: Dest = Src1 << 1
15      12 | 11      9 | 8       6 | 5 | 4   3 | 2       0
1  1  0  1 | Dest  Reg | Src Reg 1 | 0 | 1   0 | 0   0   0

Shift-Right: Dest = Src1 >> 1
15      12 | 11      9 | 8       6 | 5 | 4   3 | 2       0
1  1  0  1 | Dest  Reg | Src Reg 1 | 0 | 1   1 | 0   0   0

	This change will allow us to perform fast multiplications in hardware, rather than having to perform multiple shifts and adds over many clock cycles. The advantage will be particularly significant because the instruction set did not originally have a shift operation either, so even the shifting portion would have been complicated. Additionally, using the reserved opcode for multiplication will save us some trouble in the implementation of the illegal opcode exception, as there is no longer any illegal opcode possible.


Step 2.  Design and test the data path of your processor.  This step will take two weeks, so the report you submit next week should have the top-level design requirements and test and as much of the rest of the design as you have completed.  The rest will be done for Project Report 3.


Step 3.  Complete and submit your weekly report, with updated Gantt and tracking charts.
Steps to be used in design and testing for your architecture for this and subsequent reports:
1.  Design Phase
a) Create the requirements specification for each task in the project assignment.  Ensure the requirements specification is a) complete, b) decomposed to appropriate levels to support the design function, and c) correctly specifies the functionality, performance, and implementation resources of the project.


b) Design and verify (using Verilog models) the digital circuits required to implement the project such that the project requirements and your requirement specifications are fully and correctly implemented.


c) Design a set of tests, both test models written in Verilog and the data or data generators necessary to conduct the tests.  Validate each test and test input data by executing the Verilog models developed in 1.b. The purpose of the test set is to validate that the implemented circuit meets the requirements specification.


d) Using the Verilog circuit, test benches, and the Altera tools, answer the questions given in the Performance Data and Results section below.  The performance data thus obtained is what you expect to get when you implement the circuit.


e) Document the requirements specification, circuit design, test set design, and expected performance in your report.


2. Implementation / Evaluation Phase.
f) Create a single integrated test set.


g) Synthesize, configure, and execute the design on the Altera board.


h) Apply the integrated test set to fully verify correct execution of the circuit, and to obtain performance data


3.  Performance Data and Results
The following questions are to be answered for both the simulation and the actual circuit 
1.  What is the minimum execution time (to an accuracy of 1 µs) of your implemented circuit for each benchmark? Minimum execution the time to execute a benchmark assuming 1) all data required to execute is in FPGA memory, and 2) the frequency of the FPGA clock is maximum for correct operation of the benchmark.


2.  What FPGA area resources (columns, CPB's IOB's, cells, or any other significant resource units) does your circuit use?


3.  How much memory (in units of bytes) is used to store the machine code and associated data for each benchmark?


4.  What is the power usage?


